package View;
import Connection.ConnectionJDBC;

import java.awt.event.ActionEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import javax.swing.JOptionPane;

import Connection.ConnectionUtils;

/**
 *
 * @author NDAT_UIT
 */
public class QuyCheToChuc extends javax.swing.JFrame {

    /**
     * Creates new form QuyCheToChuc_TN
     */
    public QuyCheToChuc() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        jPanelldl = new javax.swing.JPanel();
        jButton7sldl = new javax.swing.JButton();
        jButton8sldl  = new javax.swing.JButton();
        jButton9sldl = new javax.swing.JButton();

        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setBackground(new java.awt.Color(204, 153, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Quy Định Tiền Nợ");

        jButton2.setBackground(new java.awt.Color(204, 153, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton2.setText("Quy Định Mặt Hàng");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(204, 153, 255));
        jButton3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton3.setText("Quy Chế Tổ Chức");

        jPanel1.setBackground(new java.awt.Color(204, 229, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Thay đổi quy định");        
        
        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Số loại đại lý", "Số đại lý tối đa trong quận", "Số quận","Số đơn vị tính"}));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }});
        
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "", "", ""
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        
        
        jPanel3.setBackground(new java.awt.Color(204, 255, 255));

        jLabel2.setBackground(new java.awt.Color(230, 230, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/quydinh_64px.png"))); // NOI18N
        jLabel2.setText("Quy Chế Tổ Chức");
        jLabel2.setToolTipText("");

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Icon_64px.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Mã loại đại lý");
        
        javax.swing.JLabel jLabelnotoida = new javax.swing.JLabel() ;
        jLabelnotoida.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelnotoida.setText("Số nợ tối đa");
        
        jTextFieldnotoida = new javax.swing.JTextField() ;
        jTextFieldnotoida.setFont(new java.awt.Font("Tahoma", 0, 18));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);


        jPanelldl.setBackground(new java.awt.Color(204, 229, 255));
        jPanelldl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Thay đổi quy định");

        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jButton7sldl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton7sldl.setText("Thêm");
        jButton7sldl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jButton7sldlActionPerformed(evt);
            }

        });
        
        jButton8sldl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton8sldl.setText("Xóa");
        jButton8sldl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8sldlActionPerformed(evt);
            }
        });
        
        jButton9sldl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton9sldl.setText("Sửa đổi");
        jButton9sldl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9sldlActionPerformed(evt);
            }
        });
                        
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "", "", ""
            }
        ));
        jScrollPane1.setViewportView(jTable1);

    	javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanelldl);
    	jPanelldl.setLayout(jPanel1Layout);
    	jPanelldl.revalidate();
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(20, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3)
                                .addComponent(jLabelnotoida))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextFieldnotoida, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGap(20, 20, 20))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createSequentialGroup()
                    		.addGap(20,20,20)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            		.addGroup(javax.swing.GroupLayout.Alignment.CENTER, jPanel1Layout.createSequentialGroup()
    	                                .addComponent(jButton7sldl)
    	                                .addGap(110,110,110)
    	                                .addComponent(jButton8sldl)
    	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addComponent(jButton7sldl)
                    .addComponent(jButton8sldl)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                		.addGap(350,350,350)
                        .addComponent(jButton9sldl))
                
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(15, 15, 15)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(15, 15, 15)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelnotoida)
                            .addComponent(jTextFieldnotoida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))

                    .addGap(15, 15, 15)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7sldl)
                            .addComponent(jButton8sldl)
                            .addComponent(jButton9sldl)
                            )
                    .addContainerGap())
            );
           
			try (Connection conn = ConnectionUtils.getMyConnection()) 
			{
	            if (conn != null) {
	                System.out.println("Connected to the database!");
	                Statement st =  conn.createStatement();
	                ResultSet rs;
	                String query = "Select * from loaidaily order by maloaidaily";
	                System.out.println(query);

	                rs = st.executeQuery(query);
	                String[][] queries = new String[100][];
	                int i = 0;
	                while (rs.next()) {
	                	String[] value = new String[100];
	                	value[0] = rs.getString("maloaidaily");
	                	value[1] = rs.getString("tenloaidaily");
	                	value[2] = rs.getString("sonotoida");
	                	queries[i] = value;
	                	i += 1;
	                }
	                index_loaidaily = i;
	                queries_loaidaily = queries.clone();
	                jTable1.setModel(new javax.swing.table.DefaultTableModel(
	                		queries,
	                        new String [] {
	                            "Mã loại đại lý", "Tên loại đại lý", "Số nợ tối đa"
	                        }
	                    ));

	                }
	             else {
	                System.out.println("Failed to make connection!");
	            }

	        } 
			catch (SQLException e) {
	            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
	        } 
	        catch (Exception e) {
	            e.printStackTrace();
	        }	

            
        current = jPanelldl;
        strcurrent = "check";
    	current = jPanelldl;
        jComboBox1.getModel().setSelectedItem("Số loại đại lý");
        pack();
        
        jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jButton4)
                .addGap(99, 99, 99)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jButton4))
                .addGap(25, 25, 25))
        );

        layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelldl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                    	.addGap(50,50,50)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60,60,60)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()

	                    .addComponent(jPanelldl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
	                	.addGap(60,60,60))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
        

    }// </editor-fold>//GEN-END:initComponents
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if (jComboBox1.getModel().getSelectedItem().equals("Số loại đại lý")) {
//            jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        	
            if (current != jPanelldl ) {
        		jPanelldl = new javax.swing.JPanel();
                jLabel1 = new javax.swing.JLabel();
                jLabel3 = new javax.swing.JLabel();
                jTextField2 = new javax.swing.JTextField();
//                jComboBox1 = new javax.swing.JComboBox<>();
                jScrollPane1 = new javax.swing.JScrollPane();
                jTable1 = new javax.swing.JTable();
                jButton7sldl = new javax.swing.JButton();
                jButton8sldl  = new javax.swing.JButton();
                jButton9sldl = new javax.swing.JButton();
                jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
                jLabel1.setText("Mã loại đại lý");
                
                javax.swing.JLabel jLabelnotoida = new javax.swing.JLabel() ;
                jLabelnotoida.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
                jLabelnotoida.setText("Số nợ tối đa");
                
                jTextFieldnotoida = new javax.swing.JTextField() ;
                jTextFieldnotoida.setFont(new java.awt.Font("Tahoma", 0, 18));

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);


                jPanelldl.setBackground(new java.awt.Color(204, 229, 255));
                jPanelldl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

                jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
                jLabel3.setText("Thay đổi quy định");

                jTextField2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

                jButton7sldl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
                jButton7sldl.setText("Thêm");
                jButton7sldl.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                    	jButton7sldlActionPerformed(evt);
                    }

                });
                
                jButton8sldl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
                jButton8sldl.setText("Xóa");
                jButton8sldl.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton8sldlActionPerformed(evt);
                    }
                });
                
                jButton9sldl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
                jButton9sldl.setText("Sửa đổi");
                jButton9sldl.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton9sldlActionPerformed(evt);
                    }
                });
                                
                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null}
                    },
                    new String [] {
                        "", "", ""
                    }
                ));
                jScrollPane1.setViewportView(jTable1);

            	javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanelldl);
            	jPanelldl.setLayout(jPanel1Layout);
            	jPanelldl.revalidate();
                jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap(20, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabelnotoida))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextFieldnotoida, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGap(20, 20, 20))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createSequentialGroup()
                            		.addGap(20,20,20)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    		.addGroup(javax.swing.GroupLayout.Alignment.CENTER, jPanel1Layout.createSequentialGroup()
            	                                .addComponent(jButton7sldl)
            	                                .addGap(110,110,110)
            	                                .addComponent(jButton8sldl)
            	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                            .addComponent(jButton7sldl)
                            .addComponent(jButton8sldl)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                        		.addGap(350,350,350)
                                .addComponent(jButton9sldl))
                        
                    );
                    jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(15, 15, 15)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelnotoida)
                                    .addComponent(jTextFieldnotoida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))

                            .addGap(15, 15, 15)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton7sldl)
                                    .addComponent(jButton8sldl)
                                    .addComponent(jButton9sldl)
                                    )
                            .addContainerGap())
                    );
                   
        			try (Connection conn = ConnectionUtils.getMyConnection()) 
        			{
        	            if (conn != null) {
        	                System.out.println("Connected to the database!");
        	                Statement st =  conn.createStatement();
        	                ResultSet rs;
        	                String query = "Select * from loaidaily order by maloaidaily";
        	                System.out.println(query);

        	                rs = st.executeQuery(query);
        	                String[][] queries = new String[100][];
        	                int i = 0;
        	                while (rs.next()) {
        	                	String[] value = new String[100];
        	                	value[0] = rs.getString("maloaidaily");
        	                	value[1] = rs.getString("tenloaidaily");
        	                	value[2] = rs.getString("sonotoida");
        	                	queries[i] = value;
        	                	i += 1;
        	                }
        	                index_loaidaily = i;
        	                queries_loaidaily = queries.clone();
        	                jTable1.setModel(new javax.swing.table.DefaultTableModel(
        	                		queries,
        	                        new String [] {
        	                            "Mã loại đại lý", "Tên loại đại lý", "Số nợ tối đa"
        	                        }
        	                    ));

        	                }
        	             else {
        	                System.out.println("Failed to make connection!");
        	            }

        	        } 
        			catch (SQLException e) {
        	            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
        	        } 
        	        catch (Exception e) {
        	            e.printStackTrace();
        	        }	
 
                    
                if (strcurrent == null){
                	current = jPanel1;
                	strcurrent = "check";
                }
            	layout.replace(current, jPanelldl);
            	current = jPanelldl;
                jComboBox1.getModel().setSelectedItem("Số loại đại lý");
                pack();

            }
                    
        }
        
        else if (jComboBox1.getModel().getSelectedItem().equals("Số đại lý tối đa trong quận")) {

            if (current != jPaneldltd) {
            	jPaneldltd = new javax.swing.JPanel();
            	jPaneldltd.setBackground(new java.awt.Color(204, 229, 255));
            	jPaneldltd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

            	
            	jButton7dltd = new javax.swing.JButton();
            	jButton7dltd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            	jButton7dltd.setText("Sửa đổi");
            	jButton7dltd.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton7dltdActionPerformed(evt);
                    }
                });        	
            	
                jLabel1 = new javax.swing.JLabel();
            	jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
                jLabel1.setText("Số đại lý tối đa trong quận");
                      
                jTextFielddailytoida = new javax.swing.JTextField() ;
                jTextFielddailytoida.setFont(new java.awt.Font("Tahoma", 0, 18));
                
                jPaneldltd.setBackground(new java.awt.Color(204, 229, 255));
                jPaneldltd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

                jLabel3 = new javax.swing.JLabel();
                jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
                jLabel3.setText("Thay đổi quy định");
                
                            
                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                
                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null},
                            {null, null, null}
                        },
                        new String [] {
                            "", "", ""
                        }
                    ));
                    jScrollPane1.setViewportView(jTable1);

                
            	javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPaneldltd);
            	jPaneldltd.setLayout(jPanel1Layout);
            	jPaneldltd.revalidate();
            	
            	
            	jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                	.addGap(20, 20, 20)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel3))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextFielddailytoida, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20))))

                            )
                        .addGroup(jPanel1Layout.createSequentialGroup()
    	                        .addGap(180, 180, 180)
    	                        .addComponent(jButton7dltd)
    	                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            			);
            	
                    jPanel1Layout.setVerticalGroup(
                    
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addGap(70,70,70)

                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(40,40,40)

                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addGap(50,50, 50)
                                    .addComponent(jTextFielddailytoida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addContainerGap()
                            .addGap(70,70,70)

                            .addGroup(jPanel1Layout.createSequentialGroup()
                            		.addComponent(jButton7dltd))
                            )
                        
                    );
                    
                    
                    if (strcurrent == null){
                    	current = jPanel1;
                    	strcurrent = "check";
                    }

                    layout.replace(current, jPaneldltd);
                	current = jPaneldltd;           
                	jComboBox1.getModel().setSelectedItem("Số đại lý tối đa trong quận");
                	pack();
            }

        }
        else if (jComboBox1.getModel().getSelectedItem().equals("Số quận")) {

        	if (current != jPanelq) {
        	
        	jPanelq= new javax.swing.JPanel();
        	jPanelq.setBackground(new java.awt.Color(204, 229, 255));
        	jPanelq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        	
        	
            jLabel1 = new javax.swing.JLabel();
        	jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jLabel1.setText("Mã Quận");
                  
            jTextFieldmaquan = new javax.swing.JTextField() ;
            jTextFieldmaquan.setFont(new java.awt.Font("Tahoma", 0, 18));
            
            jPanelq.setBackground(new java.awt.Color(204, 229, 255));
            jPanelq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

            jLabel3 = new javax.swing.JLabel();
            jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jLabel3.setText("Thay đổi quy định");
            
            jButton7q = new javax.swing.JButton();
            jButton7q.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jButton7q.setText("Thêm");
            jButton7q.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton7qActionPerformed(evt);
                }
            });
            
            jButton8q = new javax.swing.JButton();
            jButton8q.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jButton8q.setText("Xóa");
            jButton8q.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton8qActionPerformed(evt);
                }
            });           
            
            jButton9q = new javax.swing.JButton();
            jButton9q.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jButton9q.setText("Sửa đổi");
            jButton9q.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton9qActionPerformed(evt);
                }
            });            

            
            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            
//            jScrollPane1 = new javax.swing.JScrollPane();
//            jTable1 = new javax.swing.JTable();
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null}
                    },
                    new String [] {
                        "", "", ""
                    }
                ));
                jScrollPane1.setViewportView(jTable1);

//            jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
//            jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Số loại đại lý", "Số đại lý tối đa", "Số quận", "Số lượng mặt hàng" }));
//            jComboBox1.addActionListener(new java.awt.event.ActionListener() {
//                public void actionPerformed(java.awt.event.ActionEvent evt) {
//                    jComboBox1ActionPerformed(evt);
//                }});
            
        	javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanelq);
        	jPanelq.setLayout(jPanel1Layout);
        	jPanelq.revalidate();
        	
        	
        	jPanel1Layout.setHorizontalGroup(
                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(20, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3)
                                    )
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldmaquan, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    )))
                        .addGap(20, 20, 20))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                		.addGroup(javax.swing.GroupLayout.Alignment.CENTER, jPanel1Layout.createSequentialGroup()
        	                                .addComponent(jButton7q)
        	                                .addGap(110,110,110)
        	                                .addComponent(jButton8q)
        	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                        .addComponent(jButton7q)
                        .addComponent(jButton8q)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        		.addGap(350,350,350)
                                .addComponent(jButton9q))
                    		
                );
                jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextFieldmaquan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton7q)
                                .addComponent(jButton8q)
                                .addComponent(jButton9q))
                        .addContainerGap())
                );
                
    			try (Connection conn = ConnectionUtils.getMyConnection()) 
    			{
    	            if (conn != null) {
    	                System.out.println("Connected to the database!");
    	                Statement st =  conn.createStatement();
    	                ResultSet rs;
    	                String query = "Select * from quan order by maquan";
    	                System.out.println(query);

    	                rs = st.executeQuery(query);
    	                String[][] queries = new String[100][];
    	                int i = 0;
    	                while (rs.next()) {
    	                	String[] value = new String[100];
    	                	value[0] = rs.getString("maquan");
    	                	value[1] = rs.getString("tenquan");
    	                	queries[i] = value;
    	                	i += 1;
    	                }
    	                index_quan = i;
    	                queries_quan = queries.clone();
    	                jTable1.setModel(new javax.swing.table.DefaultTableModel(
    	                		queries,
    	                        new String [] {
    	                            "Mã quận", "Tên quận"
    	                        }
    	                    ));

    	                }
    	             else {
    	                System.out.println("Failed to make connection!");
    	            }

    	        } 
    			catch (SQLException e) {
    	            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
    	        } 
    	        catch (Exception e) {
    	            e.printStackTrace();
    	        }	

                
                
                if (strcurrent == null){
                	current = jPanel1;
                	strcurrent = "check";
                }

                layout.replace(current, jPanelq);
            	current = jPanelq;           
            	jComboBox1.getModel().setSelectedItem("Số quận");

                pack();
        }      
      }
    else if (jComboBox1.getModel().getSelectedItem().equals("Số đơn vị tính")) {

    	if (current != jPaneldvt) {
    		
    		
	    	jPaneldvt= new javax.swing.JPanel();
	    	jPaneldvt.setBackground(new java.awt.Color(204, 229, 255));
	    	jPaneldvt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
	    	
	    	
	        jLabel1 = new javax.swing.JLabel();
	    	jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
	        jLabel1.setText("Mã đơn vị tính");
	              
	        jTextFieldmadvt = new javax.swing.JTextField() ;
	        jTextFieldmadvt.setFont(new java.awt.Font("Tahoma", 0, 18));
	              
	        jTextFieldmadvt = new javax.swing.JTextField() ;
	        jTextFieldmadvt.setFont(new java.awt.Font("Tahoma", 0, 18));

	        jLabeltendvt = new javax.swing.JLabel();
	        jLabeltendvt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
	        jLabeltendvt.setText("Tên đơn vị tính");

	        jTextFieldtendvt = new javax.swing.JTextField() ;
	        jTextFieldtendvt.setFont(new java.awt.Font("Tahoma", 0, 18));

	        jPaneldvt.setBackground(new java.awt.Color(204, 229, 255));
	        jPaneldvt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
	
	        jLabel3 = new javax.swing.JLabel();
	        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
	        jLabel3.setText("Thay đổi quy định");
	        
	        jButton7dvt = new javax.swing.JButton();
	        jButton7dvt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
	        jButton7dvt.setText("Thêm");
	        jButton7dvt.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                jButton7dvtActionPerformed(evt);
	            }
	        });
	        
	        jButton8dvt = new javax.swing.JButton();
	        jButton8dvt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
	        jButton8dvt.setText("Xóa");
	        jButton8dvt.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                jButton8dvtActionPerformed(evt);
	            }
	        });           
	        
	        jButton9dvt = new javax.swing.JButton();
	        jButton9dvt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
	        jButton9dvt.setText("Sửa đổi");
	        jButton9dvt.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                jButton9dvtActionPerformed(evt);
	            }
	        });            
	
	        
	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
	        
	//        jScrollPane1 = new javax.swing.JScrollPane();
	//        jTable1 = new javax.swing.JTable();
	        jTable1.setModel(new javax.swing.table.DefaultTableModel(
	                new Object [][] {
	                    {null, null, null},
	                    {null, null, null},
	                    {null, null, null},
	                    {null, null, null},
	                    {null, null, null}
	                },
	                new String [] {
	                    "", "", ""
	                }
	            ));
	            jScrollPane1.setViewportView(jTable1);
	
	        
	    	javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPaneldvt);
	    	jPaneldvt.setLayout(jPanel1Layout);
	    	jPaneldvt.revalidate();
	    	
	    	
	    	jPanel1Layout.setHorizontalGroup(
	                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
	                    .addContainerGap(20, Short.MAX_VALUE)
	                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGroup(jPanel1Layout.createSequentialGroup()
	                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                                .addComponent(jLabel1)
	                                .addComponent(jLabel3)
	                                .addComponent(jLabeltendvt)
	                                )
	                            .addGap(18, 18, 18)
	                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addComponent(jTextFieldmadvt, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addComponent(jTextFieldtendvt, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            		)))
	                    .addGap(20, 20, 20))
	                .addGroup(jPanel1Layout.createSequentialGroup()
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                            .addGap(20, 20, 20)
	                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
	                            		.addGroup(javax.swing.GroupLayout.Alignment.CENTER, jPanel1Layout.createSequentialGroup()
	    	                                .addComponent(jButton7dvt)
	    	                                .addGap(110,110,110)
	    	                                .addComponent(jButton8dvt)
	    	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
	                    .addComponent(jButton7dvt)
	                    .addComponent(jButton8dvt)
	                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                .addGroup(jPanel1Layout.createSequentialGroup()
	                    		.addGap(350,350,350)
	                            .addComponent(jButton9dvt))
	                		
	            );
	            jPanel1Layout.setVerticalGroup(
	                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                .addGroup(jPanel1Layout.createSequentialGroup()
	                    .addGap(15, 15, 15)
	                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                        .addComponent(jLabel3)
	                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
	                    .addGap(15, 15, 15)
	                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                        .addComponent(jLabel1)
	                        .addComponent(jTextFieldmadvt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
	                    .addGap(15, 15, 15)
	                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
		                        .addComponent(jLabeltendvt)
		                        .addComponent(jTextFieldtendvt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
	                    .addGap(15, 15, 15)
	                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
	                    .addGap(18, 18, 18)
	                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                            .addComponent(jButton7dvt)
	                            .addComponent(jButton8dvt)
	                            .addComponent(jButton9dvt))
	                    .addContainerGap())
	            );
            
			try (Connection conn = ConnectionUtils.getMyConnection()) 
			{
	            if (conn != null) {
	                System.out.println("Connected to the database!");
	                Statement st =  conn.createStatement();
	                ResultSet rs;
	                String query = "Select * from donvitinh";
	                System.out.println(query);

	                rs = st.executeQuery(query);
	                String[][] queries = new String[100][];
	                int i = 0;
	                while (rs.next()) {
	                	String[] value = new String[100];
	                	value[0] = rs.getString("madonvitinh");
	                	value[1] = rs.getString("tendonvitinh");
	                	queries[i] = value;
	                	i += 1;
	                }
	                index_dvt = i;
	                queries_dvt = queries.clone();
	                jTable1.setModel(new javax.swing.table.DefaultTableModel(
	                		queries,
	                        new String [] {
	                            "Mã đơn vị tính", "Tên đơn vị tính"
	                        }
	                    ));

	                }
	             else {
	                System.out.println("Failed to make connection!");
	            }

	        } 
			catch (SQLException e) {
	            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
	        } 
	        catch (Exception e) {
	            e.printStackTrace();
	        }	

            
            
            if (strcurrent == null){
            	current = jPanel1;
            	strcurrent = "check";
            }

            layout.replace(current, jPaneldvt);
        	current = jPaneldvt;           
        	jComboBox1.getModel().setSelectedItem("Số đơn vị tính");

            pack();
    }      
  }
}                                        

    private String[][] removeElement(String[][] arr,int id,String type) {
    	if (id < 0 || arr == null || id >= arr.length)
    		return arr;
    	
    	String[][] arr_temp = new String[arr.length-1][];
    	if (type == "ldl")
    		index_loaidaily -= 1;
    	else if (type == "q")
    		index_quan -= 1;
    	else if (type == "dvt")
    		index_dvt -= 1;

    	for (int i = 0,k=0;i<arr.length;i++) {
    		if (i == id) 
    			continue;
    		arr_temp[k++] = arr[i];
    	}
    	return arr_temp;
    }
    
//    private int countBlank(String[] arr) {
//    	int count = 0;
//    	for (int i =0;i<=8;i++) {
//    		if (arr[i].isBlank())
//    			count +=1;
//    	}
//    	return count;
//    }

    
	private void jButton7sldlActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		if (evt.getSource() == jButton7sldl) {
			try (Connection conn = ConnectionUtils.getMyConnection()) 
    		{
                if (conn != null) {
                    System.out.println("Connected to the database!");
                    Statement st =  conn.createStatement();
                    ResultSet rs;
                    if (jTextField2.getText().isBlank() && jTextFieldnotoida.getText().isBlank()) {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng và đầy đủ thông tin về loại đại lý",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;
                    }
                    
                    else if (jTextField2.getText().isBlank()) {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập loại đại lý",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;

                    }
                    else if (jTextFieldnotoida.getText().isBlank()) {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập số nợ tối đa",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;

                    }
                    
                    String tenloaidaily = null;
                    try {
                    	if (jTextField2.getText().charAt(0) != 'L') {
                            JOptionPane.showMessageDialog(null,
                                    "Vui lòng nhập đúng định dạng mã loại đại lý",
                                    "ERROR",
                                    JOptionPane.ERROR_MESSAGE);
                            return;
                    	}
                    }
                    catch (java.lang.StringIndexOutOfBoundsException e) {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng định dạng mã loại đại lý",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;

                    }
                    
                    try {
                        int t = Integer.parseInt(jTextField2.getText().substring(1,jTextField2.getText().length()));
                    } catch (NumberFormatException nfe) {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng định dạng mã loại đại lý",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    tenloaidaily = jTextField2.getText().substring(1,jTextField2.getText().length());
                    if (tenloaidaily.charAt(0) == '0')
                    	tenloaidaily = tenloaidaily.substring(1,tenloaidaily.length());

                    tenloaidaily = "Đại lý cấp " + tenloaidaily;
                    System.out.println(tenloaidaily);

                    String notoida = jTextFieldnotoida.getText();
                    String query = "Insert into loaidaily values (\'" + jTextField2.getText() + "\'," + "\'" + tenloaidaily + "\'," + notoida + ")"; 

                    st.execute(query);

                    String[] value = new String[3];
                    value[0] = jTextField2.getText();;
                    value[1] = tenloaidaily;
                    value[2] = notoida;
                    
                    queries_loaidaily[index_loaidaily] = value;
                    index_loaidaily += 1;
	                jTable1.setModel(new javax.swing.table.DefaultTableModel(
	                		queries_loaidaily,
	                        new String [] {
	                            "Mã loại đại lý", "Tên loại đại lý", "Số nợ tối đa"
	                        }
	                    ));                    
                    
                } 
                else {
                    System.out.println("Failed to make connection!");
                }

            } 
			
			catch (SQLException e) {
                System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
                if (e.getSQLState().equals("23000")) 
                    JOptionPane.showMessageDialog(null,
                            "Mã loại đại lý đã tồn tại",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                else if (e.getSQLState().equals("42000")) 
                    JOptionPane.showMessageDialog(null,
                            "Vui lòng nhập đúng định dạng tiền nợ",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                return;
            } 
			catch (Exception b) {
				JOptionPane.showMessageDialog(null,
                        "Vui lòng nhập đúng định dạng",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
				return;
			}
	        jButton9sldl.setText("Sửa đổi");
		}
        JOptionPane.showMessageDialog(null,
                "Thêm thành công",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
	}
	private void jButton8sldlActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		int row_select = jTable1.getSelectedRow();
		
		if (row_select == -1 || row_select >= index_loaidaily) {
            JOptionPane.showMessageDialog(null,
                    "Vui lòng chọn loại đại lý cần xóa",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
		}
		
		if (evt.getSource() == jButton8sldl) {
			try (Connection conn = ConnectionUtils.getMyConnection()) 
    		{
                if (conn != null) {
                    System.out.println("Connected to the database!");
                    Statement st =  conn.createStatement();
                    
                    String delete_query = "Delete from loaidaily where maloaidaily = " + "\'" + queries_loaidaily[row_select][0] + "\'";
                    System.out.println(delete_query);
                    
                    st.execute(delete_query);
                    
                    queries_loaidaily = removeElement(queries_loaidaily,row_select,"ldl");
	                
                    jTable1.setModel(new javax.swing.table.DefaultTableModel(
	                		queries_loaidaily,
	                        new String [] {
	                            "Mã loại đại lý", "Tên loại đại lý", "Số nợ tối đa"
	                        }
	                    ));                    
                    
                } else {
                    System.out.println("Failed to make connection!");
                }

            } catch (SQLException e) {
                System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
                if (e.getSQLState().equals("23000"))
                    JOptionPane.showMessageDialog(null,
                            "Tồn tại hồ sơ chứa loại đại lý này",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                return;

            } catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}    
	        jButton9sldl.setText("Sửa đổi");

		}
        JOptionPane.showMessageDialog(null,
                "Xóa thành công",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);


	}
	
	private int current_row_sldl = -2;
	private void jButton9sldlActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
    	if (evt.getSource() == jButton9sldl) {
    		
    		int row_select = jTable1.getSelectedRow();
    		
    		if (row_select >= index_loaidaily) {
        		jTextField2.setText(null);
        		jTextFieldnotoida.setText(null);        		
        		JOptionPane.showMessageDialog(null,
	        		    "Vui lòng chọn loại đại lý tồn tại",
	                    "ERROR",
	                    JOptionPane.ERROR_MESSAGE);
        		
        		current_row_sldl = row_select;
    			
                return;
    		}
    		
    		if (current_row_sldl >= 0 ) {
    			jTable1.getSelectionModel().setSelectionInterval(current_row_sldl, current_row_sldl);

    			jButton9sldl.setText("Xác nhận");
    		}
    		
    		if (row_select >= 0) {
    			if (current_row_sldl != row_select) {
    				jTextFieldnotoida.setText(queries_loaidaily[row_select][2]);
	    			jTextField2.setText(queries_loaidaily[row_select][0]);
    			}	
    			current_row_sldl = row_select;
    			    			    			    			    			
    			jButton9sldl.setText("Sửa đổi");
    			
    			String tenloaidaily = null;
                try {
                	if (jTextField2.getText().charAt(0) != 'L') {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng định dạng mã loại đại lý",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                	}
                }
                catch (java.lang.StringIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null,
                            "Vui lòng nhập đúng định dạng mã loại đại lý",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                	return;

                }
                
                try {
                    int t = Integer.parseInt(jTextField2.getText().substring(1,jTextField2.getText().length()));
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null,
                            "Vui lòng nhập đúng định dạng mã loại đại lý",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }

                tenloaidaily = jTextField2.getText().substring(1,jTextField2.getText().length());
                if (tenloaidaily.charAt(0) == '0')
                	tenloaidaily = tenloaidaily.substring(1,tenloaidaily.length());

                tenloaidaily = "Đại lý cấp " + tenloaidaily;
                System.out.println(tenloaidaily);
                
                
                try (Connection conn = ConnectionUtils.getMyConnection()) 
    			{
    	            if (conn != null) {
    	                System.out.println("Connected to the database!");
    	                Statement st =  conn.createStatement();
    	                
    	    			String update_query = "Update loaidaily set " + "maloaidaily = " + "\'" +  jTextField2.getText() + "\', tenloaidaily = N\'" + tenloaidaily + "\', sonotoida = " + jTextFieldnotoida.getText() + " where maloaidaily = \'" + queries_loaidaily[row_select][0] + "\'" ;
    	    			
    	    			System.out.println(update_query);
    	    			
    	                st.execute(update_query);
    	            }
    	            else {
    	                System.out.println("Failed to make connection!");
    	            }
    	        } 
    			catch (SQLException e) {
    	            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
                    if (e.getSQLState().equals("23000"))
                    {    
                    	JOptionPane.showMessageDialog(null,
                                "Mã loại đại lý đã tồn tại hoặc tồn tại hồ sơ chứa loại đại lý này",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;
                    }
                    else if (e.getSQLState().equals("42000")) 
                    {
                    	JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng định dạng tiền nợ",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;
                    }

    	        } catch (Exception e) {
    	            e.printStackTrace();
    	        }		
    			
    			queries_loaidaily[row_select][0] = jTextField2.	getText(); // avoid conflict while update
    			queries_loaidaily[row_select][1] = tenloaidaily;
    			queries_loaidaily[row_select][2] = jTextFieldnotoida.getText();

                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                		queries_loaidaily,
                        new String [] {
                            "Mã loại đại lý", "Tên loại đại lý", "Số nợ tối đa"
                        }
                    ));
    			}
    		}
   }

	
	private void jButton7dltdActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		if (evt.getSource() == jButton7dltd) {
			try (Connection conn = ConnectionUtils.getMyConnection()) 
			{
	            if (conn != null) {
	                System.out.println("Connected to the database!");
	                Statement st =  conn.createStatement();
	                String query = "update thamso set sodailytoida = " + jTextFielddailytoida.getText();
	                System.out.println(query);
	                st.execute(query);
	                
	                }
	             else {
	                System.out.println("Failed to make connection!");
	            }

	        } 
			catch (SQLException e) {
	            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
	            if (e.getSQLState().equals("42000"))
                	JOptionPane.showMessageDialog(null,
                            "Vui lòng nhập đúng định dạng",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
	            return;
	            	
			} 
	        catch (Exception e) {
	            e.printStackTrace();
	        }	
		}
        JOptionPane.showMessageDialog(null,
                "Sửa thành công",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);

	}
	
	private void jButton7qActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		if (evt.getSource() == jButton7q) {
			try (Connection conn = ConnectionUtils.getMyConnection()) 
    		{
                if (conn != null) {
                    System.out.println("Connected to the database!");
                    Statement st =  conn.createStatement();
                    ResultSet rs;
                    if (jTextFieldmaquan.getText().isBlank() ) {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng định dạng mã quận",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;
                    }
                    
                    try {
                    	if (jTextFieldmaquan.getText().charAt(0) != 'Q') {
                            JOptionPane.showMessageDialog(null,
                                    "Vui lòng nhập đúng định dạng mã quận",
                                    "ERROR",
                                    JOptionPane.ERROR_MESSAGE);
                            return;
                    	}
                    }
                    catch (java.lang.StringIndexOutOfBoundsException e) {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng định dạng mã quận",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;

                    }
                    
                    try {
                    	int maquan = Integer.parseInt(jTextFieldmaquan.getText().substring(1,jTextFieldmaquan.getText().length())) ;
                    } catch (NumberFormatException nfe) {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng định dạng mã quận",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);

                    	return;
                    }
                    
                    String tenquan = null;
                    tenquan = "Quận " + jTextFieldmaquan.getText().substring(1,jTextFieldmaquan.getText().length());
                    System.out.println(tenquan);
                    
                    String query = "Insert into quan values (\'" + jTextFieldmaquan.getText() + "\'," + "N\'" + tenquan + "\')"; 
                    System.out.println(query);
                    st.execute(query);

                    String[] value = new String[2];
                    value[0] = jTextFieldmaquan.getText();;
                    value[1] = tenquan;
                    
                    queries_quan[index_quan] = value;
                    index_quan += 1;
	                jTable1.setModel(new javax.swing.table.DefaultTableModel(
	                		queries_quan,
	                        new String [] {
	                            "Mã quận", "Tên quận"
	                        }
	                    ));                    
                    
                } 
                else {
                    System.out.println("Failed to make connection!");
                }

            } 
			
			catch (SQLException e) {
                System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
                if (e.getSQLState().equals("23000")) 
                    JOptionPane.showMessageDialog(null,
                            "Mã quận đã tồn tại",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                return;
            } catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}    
	        jButton9q.setText("Sửa đổi");
		}		
        JOptionPane.showMessageDialog(null,
                "Thêm thành công",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);

	}

	private void jButton8qActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		int row_select = jTable1.getSelectedRow();
		
		if (row_select == -1 || row_select >= index_quan) {
            JOptionPane.showMessageDialog(null,
                    "Vui lòng chọn quận cần xóa",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
		}
		
		if (evt.getSource() == jButton8q) {
			try (Connection conn = ConnectionUtils.getMyConnection()) 
    		{
                if (conn != null) {
                    System.out.println("Connected to the database!");
                    Statement st =  conn.createStatement();
                    
                    String delete_query = "Delete from quan where maquan = " + "\'" + queries_quan[row_select][0] + "\'";
                    System.out.println(delete_query);
                    
                    st.execute(delete_query);
                    
                    queries_quan = removeElement(queries_quan,row_select,"q");
	                
                    jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    		queries_quan,
	                        new String [] {
	                            "Mã quận", "Tên quận"
	                        }
	                    ));                    
                    
                } else {
                    System.out.println("Failed to make connection!");
                }

            } catch (SQLException e) {
                System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
                if (e.getSQLState().equals("23000"))
                    JOptionPane.showMessageDialog(null,
                            "Tồn tại hồ sơ chứa quận này",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                return;

            } catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}    
	        jButton9q.setText("Sửa đổi");

		}
        JOptionPane.showMessageDialog(null,
                "Xóa thành công",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);

	}
	private int current_row_q = -2;
	private void jButton9qActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
    	if (evt.getSource() == jButton9q) {
    		
    		int row_select = jTable1.getSelectedRow();
    		
    		if (row_select >= index_quan) {
        		jTextFieldmaquan.setText(null);
        		JOptionPane.showMessageDialog(null,
	        		    "Vui lòng chọn quận tồn tại",
	                    "ERROR",
	                    JOptionPane.ERROR_MESSAGE);
        		
        		current_row_q = row_select;
    			
                return;
    		}
    		
    		if (current_row_q >= 0 ) {
    			jTable1.getSelectionModel().setSelectionInterval(current_row_q, current_row_q);

    			jButton9q.setText("Xác nhận");
    		}
    		
    		if (row_select >= 0) {
    			if (current_row_q != row_select) {
    				jTextFieldmaquan.setText(queries_quan[row_select][0]);
    			}	
    			current_row_q = row_select;
    			    			    			    			    			
    			jButton9q.setText("Sửa đổi");
    			
                if (jTextFieldmaquan.getText().isBlank() ) {
                    JOptionPane.showMessageDialog(null,
                            "Vui lòng nhập đúng định dạng mã quận",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                	return;
                }
                
                try {
                	if (jTextFieldmaquan.getText().charAt(0) != 'Q') {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng định dạng mã quận",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                	}
                }
                catch (java.lang.StringIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null,
                            "Vui lòng nhập đúng định dạng mã quận",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                	return;

                }
                
                try {
                	int maquan = Integer.parseInt(jTextFieldmaquan.getText().substring(1,jTextFieldmaquan.getText().length())) ;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null,
                            "Vui lòng nhập đúng định dạng mã quận",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);

                	return;
                }
                
                String tenquan = null;
                tenquan = "Quận " + jTextFieldmaquan.getText().substring(1,jTextFieldmaquan.getText().length());
                System.out.println(tenquan);
                
                
                try (Connection conn = ConnectionUtils.getMyConnection()) 
    			{
    	            if (conn != null) {
    	                System.out.println("Connected to the database!");
    	                Statement st =  conn.createStatement();
    	                
    	    			String update_query = "Update quan set " + "maquan = " + "\'" +  jTextFieldmaquan.getText() + "\', tenquan = N\'" + tenquan + "\'" + "where maquan = \'" + queries_quan[row_select][0] + "\'" ;
    	    			
    	    			System.out.println(update_query);
    	    			
    	                st.execute(update_query);
    	            }
    	            else {
    	                System.out.println("Failed to make connection!");
    	            }
    	        } 
    			catch (SQLException e) {
    	            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
                    if (e.getSQLState().equals("23000"))
                    {    
                    	JOptionPane.showMessageDialog(null,
                                "Mã quận đã tồn tại hoặc tồn tại hồ sơ chứa quận này",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;
                    }

    	        } catch (Exception e) {
    	            e.printStackTrace();
    	        }		
    			
    			queries_quan[row_select][0] = jTextFieldmaquan.getText(); // avoid conflict while update
    			queries_quan[row_select][1] = tenquan;

                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                		queries_quan,
                        new String [] {
                            "Mã quận", "Tên quận"
                        }
                    ));
    			}
    		}

	}

	private void jButton7dvtActionPerformed(ActionEvent evt) {
		if (evt.getSource() == jButton7dvt) {
			try (Connection conn = ConnectionUtils.getMyConnection()) 
    		{
                if (conn != null) {
                    System.out.println("Connected to the database!");
                    Statement st =  conn.createStatement();
                    ResultSet rs;
                    if (jTextFieldmadvt.getText().isBlank() ) {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng định dạng mã đơn vị tính",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;
                    }
                    
                    try {
                    	if (!jTextFieldmadvt.getText().substring(0,2).equals("DV")) {
                            JOptionPane.showMessageDialog(null,
                                    "Vui lòng nhập đúng định dạng mã đơn vị tính",
                                    "ERROR",
                                    JOptionPane.ERROR_MESSAGE);
                            return;
                    	}
                    }
                    catch (java.lang.StringIndexOutOfBoundsException e) {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng định dạng mã đơn vị tính",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;
                    }
                    
                    String query = "Insert into donvitinh values (\'" + jTextFieldmadvt.getText() + "\'," + "N\'" + jTextFieldtendvt.getText() + "\')"; 
                    System.out.println(query);
                    st.execute(query);

                    String[] value = new String[2];
                    value[0] = jTextFieldmadvt.getText();;
                    value[1] = jTextFieldtendvt.getText();
                    
                    queries_dvt[index_dvt] = value;
                    index_dvt += 1;
	                jTable1.setModel(new javax.swing.table.DefaultTableModel(
	                		queries_dvt,
	                        new String [] {
	                            "Mã đơn vị tính", "Tên đơn vị tính"
	                        }
	                    ));                    
                    
                } 
                else {
                    System.out.println("Failed to make connection!");
                }

            } 
			
			catch (SQLException e) {
                System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
                if (e.getSQLState().equals("23000")) 
                    JOptionPane.showMessageDialog(null,
                            "Mã đơn vị tính đã tồn tại",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                return;
            } catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}    
	        jButton9dvt.setText("Sửa đổi");
		}		
        JOptionPane.showMessageDialog(null,
                "Thêm thành công",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);

	}
	
	private void jButton8dvtActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		int row_select = jTable1.getSelectedRow();
		
		if (row_select == -1 || row_select >= index_dvt) {
            JOptionPane.showMessageDialog(null,
                    "Vui lòng chọn mã đơn vị tính cần xóa",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
		}
		
		if (evt.getSource() == jButton8dvt) {
			try (Connection conn = ConnectionUtils.getMyConnection()) 
    		{
                if (conn != null) {
                    System.out.println("Connected to the database!");
                    Statement st =  conn.createStatement();
                    
                    String delete_query = "Delete from donvitinh where madonvitinh = " + "\'" + queries_dvt[row_select][0] + "\'";
                    System.out.println(delete_query);
                    
                    st.execute(delete_query);
                    
                    queries_dvt = removeElement(queries_dvt,row_select,"dvt");
	                
                    jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    		queries_dvt,
	                        new String [] {
	                            "Mã đơn vị tính", "Tên đơn vị tính"
	                        }
	                    ));                    
                    
                } else {
                    System.out.println("Failed to make connection!");
                }

            } catch (SQLException e) {
                System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
                if (e.getSQLState().equals("23000"))
                    JOptionPane.showMessageDialog(null,
                            "Tồn tại mặt hàng chứa đơn vị tính này",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                return;

            } catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}    
	        jButton9dvt.setText("Sửa đổi");

		}
        JOptionPane.showMessageDialog(null,
                "Xóa thành công",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);

	}
	
	private int current_row_dvt = -2;
	private void jButton9dvtActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
    	if (evt.getSource() == jButton9dvt) {
    		
    		int row_select = jTable1.getSelectedRow();
    		
    		if (row_select >= index_dvt) {
        		jTextFieldmadvt.setText(null);
        		jTextFieldtendvt.setText(null);
        		JOptionPane.showMessageDialog(null,
	        		    "Vui lòng chọn đơn vị tính tồn tại",
	                    "ERROR",
	                    JOptionPane.ERROR_MESSAGE);
        		
        		current_row_dvt = row_select;
    			
                return;
    		}
    		
    		if (current_row_dvt >= 0 ) {
    			jTable1.getSelectionModel().setSelectionInterval(current_row_dvt, current_row_dvt);

    			jButton9dvt.setText("Xác nhận");
    		}
    		
    		if (row_select >= 0) {
    			if (current_row_dvt != row_select) {
    				jTextFieldmadvt.setText(queries_dvt[row_select][0]);
    				jTextFieldtendvt.setText(queries_dvt[row_select][1]);
    			}	
    			current_row_dvt = row_select;
    			    			    			    			    			
    			jButton9dvt.setText("Sửa đổi");
    			
                if (jTextFieldmadvt.getText().isBlank() ) {
                    JOptionPane.showMessageDialog(null,
                            "Vui lòng nhập đúng định dạng mã đơn vị tính",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                	return;
                }
                
                try {
                	if (!jTextFieldmadvt.getText().substring(0,2).equals("DV")) {
                        JOptionPane.showMessageDialog(null,
                                "Vui lòng nhập đúng định dạng mã đơn vị tính",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                	}
                }
                catch (java.lang.StringIndexOutOfBoundsException e) {
                    JOptionPane.showMessageDialog(null,
                            "Vui lòng nhập đúng định dạng mã đơn vị tính",
                            "ERROR",
                            JOptionPane.ERROR_MESSAGE);
                	return;

                }
                                
                try (Connection conn = ConnectionUtils.getMyConnection()) 
    			{
    	            if (conn != null) {
    	                System.out.println("Connected to the database!");
    	                Statement st =  conn.createStatement();
    	                
    	    			String update_query = "Update donvitinh set " + "madonvitinh = " + "\'" +  jTextFieldmadvt.getText() + "\', tendonvitinh = N\'" + jTextFieldtendvt.getText() + "\'" + "where madonvitinh = \'" + queries_dvt[row_select][0] + "\'" ;
    	    			
    	    			System.out.println(update_query);
    	    			
    	                st.execute(update_query);
    	            }
    	            else {
    	                System.out.println("Failed to make connection!");
    	            }
    	        } 
    			catch (SQLException e) {
    	            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
                    if (e.getSQLState().equals("23000"))
                    {    
                    	JOptionPane.showMessageDialog(null,
                                "Mã đơn vị tính đã tồn tại hoặc mặt hàng chứa mã này",
                                "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    	return;
                    }

    	        } catch (Exception e) {
    	            e.printStackTrace();
    	        }		
    			
    			queries_dvt[row_select][0] = jTextFieldmadvt.getText(); // avoid conflict while update
    			queries_dvt[row_select][1] = jTextFieldtendvt.getText();

                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                		queries_dvt,
                        new String [] {
                            "Mã đơn vị tính", "Tên đơn vị tính"
                        }
                    ));
    			}
    		}

	}

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    	if (evt.getSource() == jButton2) {
    		this.dispose();
    		new QuyCheToChuc_MH().setVisible(true);
    	}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    	if (evt.getSource() == jButton4) {
    		if (truycap.quyentruycap.equals("NND01")) {
    			new Home().setVisible(true);
    			this.dispose();
    		}
    		else if (truycap.quyentruycap.equals("NND02")) {
    			new Home_NhanVien().setVisible(true);
    			this.dispose();
    		}
    	}
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuyCheToChuc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuyCheToChuc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuyCheToChuc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuyCheToChuc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuyCheToChuc().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    
    private javax.swing.JButton jButton7sldl;
    private javax.swing.JButton jButton8sldl;
    private javax.swing.JButton jButton9sldl;
    private javax.swing.JButton jButton7dltd;
    private javax.swing.JButton jButton7q;
    private javax.swing.JButton jButton8q;
    private javax.swing.JButton jButton9q;
    private javax.swing.JButton jButton7dvt;
    private javax.swing.JButton jButton8dvt;
    private javax.swing.JButton jButton9dvt;

    javax.swing.JTextField jTextFielddailytoida;
    javax.swing.JTextField jTextFieldnotoida;
    javax.swing.JTextField jTextFieldmaquan;
    javax.swing.JTextField jTextFieldmadvt;
    javax.swing.JTextField jTextFieldtendvt;

    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabeltendvt;

    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    javax.swing.GroupLayout jPanel1Layout;
    javax.swing.GroupLayout layout;
    javax.swing.GroupLayout jPanel3Layout;
    
    String[][] queries_loaidaily = new String[100][];
    int index_loaidaily = 0;

    String[][] queries_quan = new String[100][];
    int index_quan = 0;
    
    String[][] queries_dvt= new String[100][];
    int index_dvt = 0;


    String strcurrent = null;
    javax.swing.JPanel current = new javax.swing.JPanel();
    javax.swing.JPanel change = new javax.swing.JPanel();

    javax.swing.JPanel jPanelldl = new javax.swing.JPanel();
    javax.swing.JPanel jPaneldltd = new javax.swing.JPanel();
    javax.swing.JPanel jPanelq = new javax.swing.JPanel();
    javax.swing.JPanel jPanelslmh = new javax.swing.JPanel();
    javax.swing.JPanel jPaneldvt = new javax.swing.JPanel();

}
